

params {

	outdir = "results"

	reads = false
	samples = false

	clip = 20

	run_name = false

	reference = false
	ref_with_host = false
	host_index = false

	var_call_cov = 20
	var_call_count = 10
	var_call_frac = 0.1
	var_filter_mqm = 40
	var_filter_sap = 2000
	var_filter_qual = 20
	cns_min_cov = 20
	cns_gt_adjust = 0.9

	assemble = false
	guided = true

	size_limit = 1000000

	filter = true
	fast_filter = false

	kraken2_db = false

	email = false
	logo = "${baseDir}/assets/ikmblogo.png"

	skip_multiqc = false

	plaintext_email = false 

	primer_fasta = false

	primer_sets {
		'ARTIC-v3' {
			fasta = "${baseDir}/assets/primers/ARTIC-v3.fasta"
			ptrimmer = "${baseDir}/assets/primers/ARTIC-v3_ptrimmer.txt"
		}
		'Eden' {
			fasta = "${baseDir}/assets/primers/Eden_Sydney.fasta"
		}
	}

	primer_set = false
	cov_lim = 200
}

manifest {
        version = "1.1.5"
        description = "IKMB Virus Pipeline"
        author = "Marc Hoeppner"
        homePage = "https://github.com/ikmb/virus-pipe"
        nextflowVersion = "20.01.0"
}

timeline {
        enabled = true
        file = "${params.outdir}/pipeline_info/virus-pipeline_timeline.html"
}
report {
        enabled = true
        file = "${params.outdir}/pipeline_info/virus-pipeline_report.html"
}
trace {
        enabled = true
        file = "${params.outdir}/pipeline_info/virus-pipeline_trace.txt"
}
dag {
        enabled = true
        file = "${params.outdir}/pipeline_info/virus-pipeline_dag.svg"
}

profiles {
        standard {
                includeConfig 'conf/base.config'
                includeConfig 'conf/medcluster.config'
        }
	diagnostics {
		includeConfig 'conf/base.config'
		includeConfig 'conf/ccga_dx.config'
	}
	test {
                includeConfig 'conf/base.config'
                includeConfig 'conf/test.config'
	}
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 250.GB
  max_cpus = 24
  max_time = 240.h
  maxMultiqcEmailFileSize = 25.MB

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}


